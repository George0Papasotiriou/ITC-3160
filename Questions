/* Question 2 */
SELECT * FROM PROJECT WHERE projName like 'M%';

/* Question 16 */
SELECT projNo, projName, startDate FROM Project WHERE startDate IN ( SELECT startDate FROM Project GROUP BY startDate HAVING COUNT(*) > 1) ORDER BY startDate;

/* Question 17 */
ALTER TABLE Project ADD status VARCHAR2(10); 
UPDATE Project SET status = 'active' WHERE projNo IN (1001, 1005, 1032, 1040);
UPDATE Project SET status = 'completed' WHERE projNo = 1041;
UPDATE Project SET status = 'cancelled' WHERE projNo = 1043;

SELECT projNo, projName FROM Project WHERE status = 'active';

/* Question 18 */
SELECT a.empId, a.projNo FROM ASSIGN a WHERE a.rating IS NULL;

/* Question 19 */
ALTER TABLE Project ADD numEmployeesAssigned NUMBER;

UPDATE Project SET numEmployeesAssigned = (SELECT COUNT(*) FROM Assign WHERE Assign.projNo = Project.projNo);

/* Question 20 */
CREATE OR REPLACE TRIGGER update_numEmployeesAssigned
AFTER INSERT OR UPDATE OR DELETE ON Assign
FOR EACH ROW
DECLARE
  totalEmployees NUMBER;
BEGIN
  -- Calculate the number of employees
  SELECT COUNT(*) INTO totalEmployees
  FROM Assign
  WHERE projNo = :new.projNo;

  -- Update numEmployeesAssigned field
  UPDATE Project
  SET numEmployeesAssigned = totalEmployees
  WHERE projNo = :new.projNo;
  
  COMMIT;
END;

ALTER TABLE Project ADD numEmployeesAssigned NUMBER;


BONUS: Unfinished

CREATE OR REPLACE FUNCTION get_system_info
RETURN VARCHAR2 IS
  os_info VARCHAR2(4000);
  sqldev_version VARCHAR2(4000);
  computer_specs VARCHAR2(4000);
  result VARCHAR2(4000);

BEGIN
  SELECT dbms_utility.port_string INTO os_info FROM DUAL;

  /* sqldev_version := SQLDeveloper_version.getVersion(); */
  SELECT VERSION  into sqldev_version FROM PRODUCT_COMPONENT_VERSION;

  computer_specs := 'Your computer specifications here';

  result := 'Operating System: ' || os_info || CHR(10) ||
            'SQL Developer Version: ' || sqldev_version || CHR(10) ||
            'Computer Specifications: ' || computer_specs;

  RETURN result;
END;


SELECT get_system_info() FROM DUAL;
